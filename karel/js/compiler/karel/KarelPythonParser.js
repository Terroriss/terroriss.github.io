function KarelPythonParser(){Parser.call(this);this.scanner.addWordCharacters("_");this.scanner.setCommentStructure("python");this.operators={};this.defineOperators()}KarelPythonParser.prototype=new XParser;KarelPythonParser.prototype.constructor=KarelPythonParser;
KarelPythonParser.prototype.defineOperators=function(){console.log("is this ever executed?????");this.definePrefixOperator("(",this.parenOperator,0,"RIGHT");this.definePrefixOperator("!",this.prefixOperator,100);this.defineInfixOperator("(",this.applyOperator,110,"RIGHT");this.defineInfixOperator("and",this.infixOperator,30);this.defineInfixOperator("or",this.infixOperator,20)};KarelPythonParser.statementForms={};
KarelPythonParser.statementForms["if"]=function(a){let b=a.nextTokenIndentLevel();var c=a.readPredicate();a.verifyToken(":");a.verifyNewline();var d=a.readBlock(b),e=a.nextToken();if("else"==e.text)return a.verifyToken(":"),a.verifyNewline(),["if",c,d,a.readBlock(b)];a.saveToken(e);return["if",c,d]};KarelPythonParser.statementForms["while"]=function(a){let b=a.nextTokenIndentLevel();var c=a.readPredicate();a.verifyToken(":");a.verifyNewline();return["while",c,a.readBlock(b)]};
KarelPythonParser.statementForms.repeat=function(a){let b=a.nextTokenIndentLevel();a.verifyToken("(");var c=a.nextToken(),d=c.lineNumber;a.verifyToken(")");a.verifyToken(":");a.verifyNewline();a=a.readBlock(b);return["repeat",TokenScanner.getNumber(c.text),a,["lineNumber",d]]};
KarelPythonParser.statementForms["for"]=function(a){let b=a.nextTokenIndentLevel();var c=a.nextToken().lineNumber;a.verifyToken("in");a.verifyToken("range");a.verifyToken("(");var d=a.nextToken().text;d=TokenScanner.getNumber(d);a.verifyToken(")");a.verifyToken(":");a.verifyNewline();a=a.readBlock(b);return["repeat",d,a,["lineNumber",c]]};
KarelPythonParser.prototype.readImport=function(){for(;;){var a=this.nextToken();let b=a.text;if("import"!=b&&"from"!=b){this.saveToken(a);break}"from"==b?(this.verifyToken("karel"),this.verifyToken("."),this.verifyToken("stanfordkarel"),this.verifyToken("import"),this.verifyToken("*")):this.verifyToken("karel");this.verifyNewline()}};
KarelPythonParser.prototype.readClass=function(){this.readImport();baseClass="SuperKarel";name="MyKarel";for(var a={};;){var b=this.nextToken();if(""==b.text)break;this.saveToken(b);if("run"==b.text){this.verifyToken("run");this.verifyToken("(");this.verifyToken(")");this.verifyNewline();break}else if("def"==b.text){b=this.readFunction();var c=b[1];if(c in a)throw Error("Method "+c+" already defined");a[c]=b}else throw a="Found "+b.text+" when execting method def or run().",a+="\nLine "+b.lineNumber,
Error(a);}return["class",name,baseClass,a]};KarelPythonParser.prototype.readFunction=function(){let a=this.nextTokenIndentLevel();this.verifyToken("def");var b=this.nextToken().text;if(!this.scanner.isValidIdentifier(b))throw Error('"'+b+'" is not a legal function name');this.verifyToken("(");this.verifyToken(")");this.verifyToken(":");this.verifyNewline();console.log("parsing fn "+b);return["function",b,this.readBlock(a)]};
KarelPythonParser.prototype.readBlock=function(a){void 0==a&&(console.error("header indent: "+a),console.error("must specify a header indent level"));let b=this.nextTokenIndentLevel();if(b<=a)throw Error("Function body must be indentented");for(a=["block"];this.hasMoreTokens();){var c=this.nextTokenIndentLevel();if(c>b)throw Error("Indentation error");if(c<b)break;c=this.readStatement();a.push(c)}return a};
KarelPythonParser.prototype.readStatement=function(a){var b=this.nextToken();a=b.text;b=b.lineNumber;var c=KarelPythonParser.statementForms[a];if(c)return c(this);this.verifyToken("(");this.verifyToken(")");this.verifyNewline();return["stmt",["call",a],["lineNumber",b]]};KarelPythonParser.prototype.readPredicate=function(){console.log("read predicate");let a=this.readE(0);console.log(a);"and"==a[0]&&(a[0]="&&");"or"==a[0]&&(a[0]="||");console.log("predicate:");console.log(a);return a};
