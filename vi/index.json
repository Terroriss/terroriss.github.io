[{"uri":"https://course.minhlong.site/vi/programming-methodology/karel/introduction/","title":"Giới thiệu về Karel","tags":[],"description":"","content":"Karel là một robot sống trong một thế giới nhỏ, bằng việc gọi các câu lệnh, người dùng có thể để cho robot thực hiện các tác vụ đơn giản như di chuyển, đổi hướng, thu thập vật phẩm, đặt vật phẩm.\nCác bạn có thể thử nghiệm robot Karel bên dưới:\nThế giới: Mục tiêu: move(); turnLeft(); pickBeeper(); putBeeper(); Câu lệnh Tác vụ move() Tiến về trước một bước nếu phía trước không có vật cản turn_left() Quay 90 độ về bên trái (Quay ngược chiều kim đồng hồ) pick_beeper() Thu thập vật phẩm put_beeper() Đặt vật phẩm "},{"uri":"https://course.minhlong.site/vi/programming-methodology/brief/","title":"Tóm lược","tags":[],"description":"","content":"Đây là bản ghi chép cho khóa học CS106A của Đại học Stanford.\nCS106A là khóa học giới thiệu về các kỹ thuật xây dựng ứng dụng máy tính, tập trung vào các nguyên tắc kỹ thuật phần mềm hiện đại: thiết kế hướng đối tượng (object-oriented design), phân rã (decomposition), đóng gói (encapsulation), trừu tượng hóa (abstraction) và kiểm thử (testing).\nCác ví dụ trong chuỗi bài này sử dụng ngôn ngữ lập trình Java.\n"},{"uri":"https://course.minhlong.site/vi/programming-methodology/karel/programming/","title":"Lập trình Karel","tags":[],"description":"","content":"Ở phần trước ta đã làm quen với robot Karel và câu lệnh. Thực tế, các câu lệnh của Karel không được gọi trực tiếp (bằng nút bấm) như ở phần trước, mà nó sẽ nằm trong một chương trình Karel. Mỗi câu lệnh trong chương trình kết thúc bằng dấu chấm phẩy (;).\nĐây là ví dụ về một chương trình Karel:\nRun Program Bên trái chính là đoạn chương trình, còn bên phải là hiển thị của Karel. Khi ta ấn \u0026ldquo;Run Program\u0026rdquo;, đoạn chương trình sẽ được chạy, và các thao tác tương ứng sẽ được Karel thực hiện.\nĐoạn đầu là chú giải (comment), các đoạn comment để cho người lập trình ứng dụng đọc, và máy tính sẽ tự động bỏ qua những dòng này.\n/* * File: FirstKarel.java * ----------------------------- * The FirstKarel program defines a \u0026#34;run\u0026#34; * method with three commands. These commands cause * Karel to move forward one block, pick up a beeper * and then move ahead to the next corner. */ Comment ở trên mô tả chương trình Karel này có một hàm \u0026ldquo;run\u0026rdquo; với 3 câu lệnh. Các câu lệnh này để cho Karel đi về trước một ô, nhặt vật phẩm lên và đi tới cạnh ở phía trước.\nỞ bên dưới là chương trình chính, bản Karel này được viết trên Java, các cú pháp và cấu trúc chương trình các bạn có thể xem rõ hơn ở phần Java. Ở phần tìm hiểu về Karel này, chúng ta sẽ tập trung vô phần dưới dòng comment /* the program begins running here */.\npublic void run() { move(); pickBeeper(); move(); } Hàm là một nhóm câu lệnh có tên, được chương trình gọi để xử lý một tác vụ nào đó. Các câu lệnh trước đây (move, turnLeft, pickBeeper, putBeeper) đều là hàm.\nĐoạn code trên định nghĩa một hàm run. Hàm run này sẽ được chạy khi ta ấn \u0026ldquo;Run program\u0026rdquo;. Trong hàm run gồm ba hàm khác. Các hàm này sẽ được thực hiện tuần tự từ trên xuống dưới.\nGiải quyết vấn đề phức tạp hơn Ở trên là một chương trình đơn giản với ba câu lệnh, giả sử bây giờ ta muốn xử lý một vấn đề phức tạp hơn, như để robot Karel cho ra kết quả như hình bên dưới.\nTrước: Sau: Để Karel có thể cho ra kết quả như hình sau, bước đầu tiên ta vẫn thực hiện các câu lệnh như ở đầu bài.\nmove(); pickBeeper(); move(); Sau đó, gọi hàm turnLeft(); và move(); để được như hình dưới:\nỞ vị trí này, ta thấy bước tiếp theo cần để cho Karel quay phải, nhưng Karel chỉ có sẵn hàm quay trái là turnLeft(); chứ không có hàm turnRight(); để quay phải.\nChúng ta có thể thực hiện việc quay phải bằng cách cho Karel quay trái 3 lần. Sau đó dùng move(); và putBeeper(); để cho ra kết quả mong muốn.\nĐây là chương trình hoàn chỉnh:\nRun Program "},{"uri":"https://course.minhlong.site/vi/programming-methodology/karel/","title":"Karel","tags":[],"description":"","content":"Phần 1. Karel Karel the Robot\n"},{"uri":"https://course.minhlong.site/vi/programming-methodology/karel/methods/","title":"Hàm","tags":[],"description":"","content":"Ở cuối phần trước ta đã viết một chương trình giúp Karel leo lên bậc thềm:\nRun Program Ta dùng ba lần turnLeft(); (quay trái) để cho Karel thực hiện việc quay sang phải. Nếu mỗi lần muốn Karel quay phải đều phải làm như vậy thì thật rắc rồi, và khi đọc code ta cũng khó hình dung được chỗ code đó là để thực hiện việc quay phải. Sẽ dễ dàng hơn nhiều nếu có một hàm turnRight();. Như đã nói ở trước, Karel không có sẵn hàm này, nhưng ta có thể tự viết một hàm như vậy.\nTự định nghĩa hàm mới Ta có thể tạo hàm mới với cú pháp sau:\nprivate void name() { // commands } Với name là tên hàm, và // commands là các câu lệnh trong hàm.\nCụ thể, ta có thể tạo hàm turnRight:\nprivate void tunRight() { turnLeft(); turnLeft(); turnLeft(); } Sau khi định nghĩa hàm, ta có thể gọi nó như các hàm có sẵn của Karel. Chương trình ở trên có thể viết lại với hàm turnRight như sau:\nRun Program "},{"uri":"https://course.minhlong.site/vi/programming-methodology/java/","title":"Java","tags":[],"description":"","content":"Phần 2. Java Giới thiệu về ngôn ngữ lập trình Java\n"},{"uri":"https://course.minhlong.site/vi/programming-methodology/karel/decomposition/","title":"Chia nhỏ code","tags":[],"description":"","content":"Việc định nghĩa hàm mới không chỉ giúp ta dễ hình dung nhiệm vụ của những câu lệnh đó, mà hàm còn giúp ta có thể dễ dàng chia nhỏ và quản lý code, giúp ta tiết kiệm thời gian khi không phải viết đi viết lại những khối câu lệnh giống nhau.\nGiả sử trong thế giới của Karel có một con đường bị hỏng, ta cần sửa con đường đó bằng cách cho Karel đi đến đó và lấp đầy lỗ hổng.\nTrước: Sau: Nếu chỉ có thể sử dụng 4 câu lệnh có sẵn của Karel, chương trình sẽ trông như sau:\nprivate void run() { move(); turnLeft(); turnLeft(); turnLeft(); move(); putBeeper(); turnLeft(); turnLeft(); move(); turnLeft(); turnLeft(); turnLeft(); move(); } Ta có thể chia nhỏ vấn đề trên thành các vấn đề nhỏ hơn để giải quyết:\nĐi đến hố Lấp đầy hố bằng cách đặt một vật thể vào đó Đi tiếp Nếu ta giải quyết vấn đề theo cách trên, với một hàm fillPothole để thực hiện nhiệm vụ lấp hố, thì chương trình có thể được viết như sau:\nprivate void run() { move(); fillPothole(); move(); } Chunogw trình trở nên ngắn gọn, dễ hiểu hơn. Nhưng để Karel hiểu được fillPothole là gì, ta cần định nghĩa một hàm fillPothole trong chương trình, như ta đã làm ở phần trước với hàm turnRight:\nprivate void fillPothole() { turnRight(); move(); putBeeper(); turnAround(); move(); turnRight(); } Đây là chương trình hoàn chỉnh:\nRun Program "},{"uri":"https://course.minhlong.site/vi/programming-methodology/karel/for-loops/","title":"Vòng lặp For","tags":[],"description":"","content":"Khi ta cần thực hiện một hành động lặp lại nhiều lần, chẳng hạn như đặt vật thể xuống một vị trí 42 lần:\nTrước: Sau: Vòng lặp For Ta có 42 khối cần được đặt xuống, với trường hợp biết trước số lần lặp như vậy ta sẽ dùng vòng lặp for. Cấu trúc vòng lặp for trong Karel như sau:\nfor(int i = 0; i \u0026lt; n; i++) { // các câu lệnh cần lặp } Câu lệnh for trên có thể được hiểu là \u0026ldquo;thực hiện các câu lệnh trong dấu ngoặc nhọn n lần\u0026rdquo;. Ta có thể dùng câu lệnh for để giải quyết vấn đề ở đầu, bằng cách thay thế n bằng 42 và đặt câu lệnh putBeeper() bên trong khối lệnh của vòng lặp.\nCác câu lệnh nằm trong cùng một cặp ngoặc nhọn {} được gọi là một khối lệnh.\nRun Program Kiểm tra điều kiện trước và sau vòng lặp (Preconditions - Postconditions) Ví dụ trên ta thực hiện vòng lặp với một câu lệnh duy nhất trong vòng lặp. Khối câu lệnh trong vòng lặp có thể bao gồm nhiều câu lệnh. Đoạn chương trình dưới thực hiện việt đặt vật ở 4 góc:\nRun Program Hãy chú ý các dòng code trong vòng lặp, câu lệnh turnLeft() được thực hiện ở cuối vòng lặp, nếu lúc này ta không quay sang trái mà để vòng lặp tiếp tục thực hiện thì sẽ bị lỗi, bởi vì sau khi thực hiện putBeeper() ở vòng lặp tiếp theo, thì phía trước của Karel đã bị chắn bởi bức tường, câu lệnh move() sẽ không thể nào thực hiện được. Đoạn code ở trên có thể chỉnh sửa được, mọi người có thể xóa câu lệnh turnLeft() đi và chạy thử.\nCần chú ý: Khi kết thúc mỗi vòng lặp, cần kiểm tra để đảm bảo trạng thái hiện tại đủ điều kiện để thực hiện các câu lệnh ở vòng lặp sau đó.\nVòng lặp lồng nhau Bên trong vòng lặp có thể chứa bất kỳ câu lệnh (khối câu lệnh) nào. Chương trình bên dưới có một vòng lặp for bên trong vòng lặp for khác. Mọi người hãy thử đọc qua chương trình và đoán xem chương trình hoạt động như thế nào trước khi chạy chương trình: Run Program "},{"uri":"https://course.minhlong.site/vi/programming-methodology/karel/while-loops/","title":"Vòng lặp While","tags":[],"description":"","content":""},{"uri":"https://course.minhlong.site/vi/programming-methodology/","title":"Phương Pháp Luận Lập Trình","tags":["Lập trình","Lý thuyết","Khoa học máy tính"],"description":"","content":"Phương Pháp Luận Lập Trình "},{"uri":"https://course.minhlong.site/vi/programming-methodology/karel/ide/","title":"IDE","tags":[],"description":"","content":" Change World 1x1 4x4 3x6 7x7 8x8 Run Program "},{"uri":"https://course.minhlong.site/vi/programming-methodology/references/","title":"Tham khảo","tags":[],"description":"","content":" Nguồn CS106A https://web.stanford.edu/class/cs106a/ Karel https://compedu.stanford.edu/karel-reader/docs/java/en/intro.html "},{"uri":"https://course.minhlong.site/vi/tags/khoa-h%E1%BB%8Dc-m%C3%A1y-t%C3%ADnh/","title":"Khoa học máy tính","tags":[],"description":"","content":""},{"uri":"https://course.minhlong.site/vi/tags/l%E1%BA%ADp-tr%C3%ACnh/","title":"Lập trình","tags":[],"description":"","content":""},{"uri":"https://course.minhlong.site/vi/tags/l%C3%BD-thuy%E1%BA%BFt/","title":"Lý thuyết","tags":[],"description":"","content":""},{"uri":"https://course.minhlong.site/vi/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://course.minhlong.site/vi/contact/","title":"","tags":[],"description":"","content":"About me\n"},{"uri":"https://course.minhlong.site/vi/","title":"","tags":[],"description":"","content":" Phương Pháp Luận Lập Trình 10+ bài viết\n"},{"uri":"https://course.minhlong.site/vi/categories/","title":"Categories","tags":[],"description":"","content":""}]