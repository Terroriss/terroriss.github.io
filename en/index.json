[{"uri":"https://minhlong.site/en/demo/game/breakout/","title":"Demo Game | Breakout","tags":[],"description":"","content":"  .main-content { display: flex; justify-content: center; align-items: center; flex-direction: column; height: 100%; color: var(--color-heading); } .newgame-btn { margin-top: 15px; width: 100%; width: 300px; height: 30px; background: var(--color-heading); color: var(--background); }     const main_container = document.querySelector(\".main-content\"); var _notmobile = false, playing = false, score = 0, lost = false;   "},{"uri":"https://minhlong.site/en/contact/","title":"","tags":[],"description":"","content":"About me\n"},{"uri":"https://minhlong.site/en/","title":"","tags":[],"description":"","content":"\nNo Article.\n\n"},{"uri":"https://minhlong.site/en/demo/","title":"Code Editor | Minh Long","tags":[],"description":"","content":" Demo Artificial Intelligence ✕ Minesweeper Solver Using Knowledge-based        Game ✕ Breakout        Website ✕ Auction Page      ✕ Simple Code Editor         $(document).on('click', '.close-des', function () { $(this).parents('.block-des').fadeOut(); }); $( document ).ready(function() { masonryGrid(); }); $( document ).on('resize', function() { masonryGrid(); }); function masonryGrid() { var all_grid = document.querySelectorAll('.block-grid'); all_grid.forEach(grid = { var rowGap = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-row-gap')), rowHeight = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-auto-rows')), items = grid.querySelectorAll('.block-card'); items.forEach(item = { let rowSpan = Math.ceil((item.getBoundingClientRect().height+rowGap)/(rowHeight+rowGap)); item.style.gridRowStart = 'span ' + rowSpan; }); }); }  "},{"uri":"https://minhlong.site/en/demo/editor/","title":"Demo | Minh Long","tags":[],"description":"","content":"  .darkmode-container { position: fixed; top: 6px; right: 20px; left: auto; bottom: auto; } .dark-toggle { transform: scale(.7); } .dark-toggle:checked { transform: scale(.525); }          HTML CSS JavaScript Result  HTML     CSS     JavaScript        Console Projects    ˅      ✕       var eventMethod = window.addEventListener ? \"addEventListener\" : \"attachEvent\"; var eventer = window[eventMethod]; var messageEvent = eventMethod === \"attachEvent\" ? \"onmessage\" : \"message\"; const myConsole = document.querySelector(\".editor-console\"); const openProjectModal = document.querySelector(\".open-project-modal\"); eventer(messageEvent, function (e) { // if (e.origin !== 'http://the-trusted-iframe-origin.com') return; const raw = e.data || e.message, data = JSON.parse(raw), newMsg = document.createElement(\"div\"); if (data[\"type\"]===\"error\") { const msgError = document.createElement(\"div\"); const error = JSON.parse(data[\"msg\"]); msgError.innerHTML = `${error.message}${error.line}:${error.column}details: ${JSON.stringify(error.error_obj)}`; newMsg.appendChild(msgError); newMsg.classList.add(\"console-msg-error\"); } else newMsg.innerHTML = `${data[\"msg\"]}`; newMsg.classList.add(\"console-msg\"); myConsole.appendChild(newMsg); myConsole.scrollTop = myConsole.scrollHeight; const console_msg = document.querySelector(\".console-message\"); console_msg.innerText = \"\"; }); const consoleBtn = document.getElementById(\"open-console\"); const openModalBtn = document.getElementById(\"open-project\"); function openModal() { openProjectModal.classList.remove(\"hidden\"); openModalBtn.classList.add(\"active\"); }; function closeModal() { openProjectModal.classList.add(\"hidden\"); openModalBtn.classList.remove(\"active\"); }; function toggleConsole() { const is_hidden = myConsole.classList.contains(\"hidden\"); if (is_hidden) showConsole(); else hideConsole(); }; function showConsole() { myConsole.classList.remove(\"hidden\"); consoleBtn.classList.add(\"active\"); }; function hideConsole() { myConsole.classList.add(\"hidden\"); consoleBtn.classList.remove(\"active\"); }; function clearConsole() { myConsole.innerHTML = 'Console was cleared.˅'; console.clear(); }; const container = document.querySelector(\".editor-container\").classList; const console_bar = document.querySelector(\".editor-console-bar\").classList; function setReverse(bool) { if (bool) { container.add(\"reverse\"); console_bar.remove(\"reverse\"); localStorage.setItem(\"block\", \"reverse\"); } else { container.remove(\"reverse\"); console_bar.add(\"reverse\"); localStorage.setItem(\"block\", \"normal\"); } }; const _reverse = localStorage.getItem(\"block\")===\"normal\" ? false : true; if (_reverse) setReverse(true); else setReverse(false); dragHoriziontal(); function changeBlock() { if (container.contains(\"reverse\")) setReverse(false); else setReverse(true); dragHoriziontal(); };   "},{"uri":"https://minhlong.site/en/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://minhlong.site/en/demo/ai/knowledge/minesweeper/","title":"Demo AI | Minesweeper","tags":[],"description":"","content":"      ⌂  Rows:  Cols:  Mines:            var r = document.querySelector(':root'); var gameplay = document.querySelector(\".game-play\") var board = document.querySelector(\".board\") var gameconsole = document.querySelector(\".game-console\") var gamestatus = document.querySelector(\".game-status\") var cell_size var cell_columns = check_number(document.getElementById(\"new_cols\").value, 3, 50) var cell_rows = check_number(document.getElementById(\"new_rows\").value, 3, 50) var mines = check_number(document.getElementById(\"new_mines\").value, 1, 2000) if (mines  cell_rows * cell_columns) mines = Math.floor(4 * (cell_rows * cell_columns) / 5); var game = new Minesweeper(cell_rows, cell_columns, mines) var ai = new MinesweeperAI(cell_rows, cell_columns) var i, j var endGame = false var move = null var revealed = new ArraySet() var flags = new ArraySet() var na = document.createElement(\"span\") var button_group = '' var btn_group_1 = document.getElementById(\"button-group-1\") var btn_group_2 = document.getElementById(\"button-group-2\") if (window.innerWidth ...' set_game_board() create_game() window.addEventListener(\"resize\", function() { if (window.innerWidth '; for (j = 0; j `; } content += \"\"; } board.innerHTML = content; board.addEventListener(\"click\", function(e) { e.preventDefault(); const target = e.target; if (!endGame) { if (target.classList.contains(\"cell\")) { let x = parseInt(target.getAttribute(\"data-x\"), 10) let y = parseInt(target.getAttribute(\"data-y\"), 10) if (!revealed.has([x, y])) { if (game.is_mine([x, y])) { revealed.add([x, y]) endGame = true ai_stop() gamestatus.innerHTML = \"Lost\n\" target.classList.add(\"red-mine\") show_all_mines() } else { nearby = game.nearby_mines([x, y]) revealed.add([x, y]) ai.add_knowledge([x, y], nearby) let p = document.createElement(\"span\") if (nearby != 0) { p.innerHTML = nearby p.classList.add(\"count-\"+nearby) } target.classList.add(\"revealed\") target.appendChild(p) } } } } }) board.addEventListener(\"contextmenu\", function(e) { e.preventDefault(); const target = e.target; if (!endGame) { if (target.classList.contains(\"cell\")) { let x = parseInt(target.getAttribute(\"data-x\"), 10) let y = parseInt(target.getAttribute(\"data-y\"), 10) if (!revealed.has([x, y])) { let c = document.querySelector(`.cell[data-x=\"${x}\"][data-y=\"${y}\"]`) if (flags.has([x, y])) { flags.delete([x, y]) while (c.hasChildNodes()) c.firstChild.remove() c.classList.remove(\"flag\") } else { flags.add([x, y]) c.innerHTML = \"\" c.classList.add(\"flag\") game.mines_found = flags if (game.won()) { endGame = true; ai_stop() gamestatus.innerHTML = \"Won\n\" } } } else if (flags.has([x, y])) { flags.delete([x, y]) while (c.hasChildNodes()) c.firstChild.remove() c.classList.remove(\"flag\") } } } }); } function check_number(n, mn, mx) { let tmp = parseInt(n, 10) return tmp mx ? mx : tmp } function show_all_mines() { if (endGame) for (i = 0; i \" } } } } window.addEventListener(\"DOMContentLoaded\", () = { document.getElementById(\"new_game_button\").addEventListener(\"click\", function() { ai_stop() cell_columns = check_number(document.getElementById(\"new_cols\").value, 3, 50) cell_rows = check_number(document.getElementById(\"new_rows\").value, 3, 50) mines = check_number(document.getElementById(\"new_mines\").value, 1, 2000) if (mines  cell_rows * cell_columns) mines = Math.floor(4 * (cell_rows * cell_columns) / 5); game = new Minesweeper(cell_rows, cell_columns, mines) ai = new MinesweeperAI(cell_rows, cell_columns) endGame = false move = null revealed = new ArraySet() flags = new ArraySet() na = document.createElement(\"span\") gamestatus.innerHTML = 'Playing...' na.innerHTML = \"New game: \" + cell_columns + \" x \" + cell_rows + \": \" + mines + \" mines\" gameconsole.innerHTML = \"\" gameconsole.appendChild(na) set_game_board() create_game() }) }) function ai_play() { if(!endGame) setInterval(aiMove, 100) } function ai_stop() { const interval_id = window.setInterval(function(){}, Number.MAX_SAFE_INTEGER); for (let i = 1; i \" for (let t = 0; t \"; let row = \"\"; for (let m = 0; m X\"; else row += \"\u0026nbsp\u0026nbsp\"; } content += row + \"\"; } content += \"\" let c = document.createElement(\"span\") c.innerHTML = content; gameconsole.appendChild(c) } function aiMove() { if(!endGame) { var message = document.createElement(\"span\") var move = ai.make_safe_move() if (move == null) { move = ai.make_random_move() if (move) message.innerHTML = \"No known safe moves, AI making random move.\" else message.innerHTML = \"No moves left to make.\" } else { message.innerHTML = \"AI making safe move.\" } gameconsole.appendChild(message) updateConsole() var mines_found = ai.mines var ai_flags = minusSet(mines_found, flags) if (move) { let evt = document.createEvent('MouseEvents'); evt.initMouseEvent('click', true, true, document.defaultView, 1, 0, 0, 0, 0, false, false, false, false, 0, null); document.querySelector(`.cell[data-x=\"${move[0]}\"][data-y=\"${move[1]}\"]`).dispatchEvent(evt); } const s_i = ai_flags[Symbol.iterator]() for (let c = 0; c "},{"uri":"https://minhlong.site/en/tags/","title":"Tags","tags":[],"description":"","content":""}]